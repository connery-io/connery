import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module.js';
import { AllExceptionsFilter } from './all-exceptions.filter.js';
import { PluginDefinition } from '../types/definition.js';
import { Plugin } from '../core/plugin.js';
import { PluginService } from './services/plugin.service.js';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { INestApplication } from '@nestjs/common';
import { PluginConfigService } from './services/plugin-config.service.js';
import { logAdditionalData, logError, logSuccess } from '../cli/shared.js'; // TODO move this out of CLI and share between CLI and SDK
import serverlessExpress from '@codegenie/serverless-express';
import { Callback, Context, Handler } from 'aws-lambda';

export async function setupPluginServer(pluginDefinition: PluginDefinition): Promise<Handler> {
  try {
    const app = await configureServer(pluginDefinition);

    if (process.env.HOSTING_MODE === 'AWS_LAMBDA') {
      await app.init();
      const expressApp = app.getHttpAdapter().getInstance();
      const server = serverlessExpress({ app: expressApp });

      // TODO: cache the server
      logSuccess('The plugin server is configured to AWS_LAMBDA hosting mode and ready to handle requests.');

      return async (event: any, context: Context, callback: Callback) => {
        return server(event, context, callback);
      };
    } else if (process.env.HOSTING_ENV === 'STANDARD' || !process.env.HOSTING_MODE) {
      await app.listen(4201);

      logSuccess('The plugin server is up and running.');
      logAdditionalData('You can access it in a browser at http://localhost:4201.');

      return async () =>
        console.log(
          'The plugin server is running in a standard mode (HOSTING_ENV=STANDARD). The event handler is ignored.',
        );
    } else {
      throw new Error(`Unsupported hosting environment: ${process.env.HOSTING_ENV}`);
    }
  } catch (error: any) {
    logError(error);
    throw error;
  }
}

async function configureServer(pluginDefinition: PluginDefinition): Promise<INestApplication> {
  const app = await NestFactory.create(AppModule, { cors: true, logger: false });

  // Init plugin
  const plugin = new Plugin(pluginDefinition);
  const pluginService = app.get(PluginService);
  pluginService.plugin = plugin;

  // Init OpenAPI spec
  await initOpeApiSpec(app);

  // Global filters
  app.useGlobalFilters(new AllExceptionsFilter());

  return app;
}

async function initOpeApiSpec(app: INestApplication) {
  const pluginConfigService = app.get(PluginConfigService);
  const sdkVersion = await pluginConfigService.getSdkVersion();

  const config = new DocumentBuilder()
    .setTitle('Plugin API')
    .setDescription(
      `This is a standardized API generated by Connery SDK (${sdkVersion}) for the plugin. Different clients use it to run the actions.`,
    )
    .setVersion(sdkVersion)
    .addApiKey({ type: 'apiKey', in: 'header', name: 'x-api-key' }, 'ApiKey')
    .addTag('Plugin')
    .addTag('Actions')
    .addTag('Specs', 'Action specifications for different clients.')
    .addServer(pluginConfigService.pluginServerUrl, 'Plugin URL')
    .build();
  const document = SwaggerModule.createDocument(app, config);

  SwaggerModule.setup('api', app, document, {
    customfavIcon: '',
    customSiteTitle: 'Plugin API',
    customCss: `
      .swagger-ui .topbar { display: none } `,
    swaggerOptions: {
      persistAuthorization: true,
    },
  });
}
